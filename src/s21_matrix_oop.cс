#include "s21_matrix_oop.h"

S21Matrix::S21Matrix() {
  rows_ = 3;
  cols_ = 3;
  CreateMatrix();
}

S21Matrix::S21Matrix(int rows, int cols) : rows_(rows), cols_(cols) {
  CreateMatrix();
}

S21Matrix::S21Matrix(const S21Matrix &other)
    : S21Matrix(other.rows_, other.cols_) {
  CopyMatrix(other);
}

S21Matrix::S21Matrix(S21Matrix &&other) noexcept {
  Swap(other);
  other.rows_ = 0;
  other.cols_ = 0;
  other.matrix_ = nullptr;
}

S21Matrix::~S21Matrix() { ClearMatrix(); }

//  ---------------------accessor Ð¸ mutator-------------------------------

int S21Matrix::GetRows() const noexcept { return rows_; }

void S21Matrix::SetRows(int rows) {
  if (rows < 1) {
    throw std::out_of_range("Row cannot be less than or equal to 0");
  }
  S21Matrix tmp(rows, cols_);
  for (int i = 0; i < (rows_ < rows ? rows_ : rows); i++) {
    for (int j = 0; j < cols_; j++) {
      tmp.matrix_[i][j] = matrix_[i][j];
    }
  }
  *this = std::move(tmp);
}

int S21Matrix::GetCols() const noexcept { return cols_; }

void S21Matrix::SetCols(int cols) {
  if (cols < 1) {
    throw std::out_of_range("Column cannot be less than or equal to 0");
  }
  S21Matrix tmp(rows_, cols);
  for (int i = 0; i < rows_; i++) {
    for (int j = 0; j < (cols_ < cols ? cols_ : cols); j++) {
      tmp.matrix_[i][j] = matrix_[i][j];
    }
  }
  *this = std::move(tmp);
}

//  -------------------Overload operators----------------------------

S21Matrix &S21Matrix::operator=(const S21Matrix &other) {
  if (matrix_ != nullptr) {
    ClearMatrix();
  }
  rows_ = other.rows_;
  cols_ = other.cols_;
  CreateMatrix();
  CopyMatrix(other);
  return *this;
}

S21Matrix &S21Matrix::operator=(S21Matrix &&other) {
  if (matrix_ != nullptr) {
    ClearMatrix();
  }
  Swap(other);
  return *this;
}

bool S21Matrix::operator==(const S21Matrix &other) const {
  return EqMatrix(other);
}

double &S21Matrix::operator()(int i, int j) const {
  if (i >= rows_ || j >= cols_) {
    throw std::out_of_range("Index is out of range");
  } else if (i < 0 || j < 0) {
    throw std::out_of_range("Index less than zero");
  }
  return matrix_[i][j];
}

S21Matrix &S21Matrix::operator+=(const S21Matrix &other) {
  SumMatrix(other);
  return *this;
}

S21Matrix S21Matrix::operator+(const S21Matrix &other) const {
  S21Matrix result(*this);
  return result += other;
}

S21Matrix &S21Matrix::operator-=(const S21Matrix &other) {
  SubMatrix(other);
  return *this;
}

S21Matrix S21Matrix::operator-(const S21Matrix &other) const {
  S21Matrix result(*this);
  return result -= other;
}

S21Matrix &S21Matrix::operator*=(const S21Matrix &other) {
  MulMatrix(other);
  return *this;
}

S21Matrix &S21Matrix::operator*=(const double &num) {
  MulNumber(num);
  return *this;
}

S21Matrix S21Matrix::operator*(const S21Matrix &other) const {
  S21Matrix result(*this);
  return result *= other;
}

S21Matrix S21Matrix::operator*(const double &num) const {
  S21Matrix result(*this);
  return result *= num;
}

S21Matrix operator*(const double &num, const S21Matrix &matrix) {
  S21Matrix result(matrix);
  return result *= num;
}

//  ----------------------Math
//  operations-----------------------------------------------

bool S21Matrix::EqMatrix(const S21Matrix &other) const {
  bool result = true;
  if (rows_ != other.rows_ || cols_ != other.cols_) {
    result = false;
  } else {
    for (int i = 0; i < rows_; i++) {
      for (int j = 0; j < cols_; j++) {
        if (std::fabs(matrix_[i][j] - other.matrix_[i][j]) > 1e-7) {
          result = false;
        }
      }
    }
  }
  return result;
}

void S21Matrix::SumMatrix(const S21Matrix &other) {
  CheckRowsCols(other);
  for (int i = 0; i < rows_; i++) {
    for (int j = 0; j < cols_; j++) {
      matrix_[i][j] += other.matrix_[i][j];
    }
  }
}

void S21Matrix::SubMatrix(const S21Matrix &other) {
  CheckRowsCols(other);
  for (int i = 0; i < rows_; i++) {
    for (int j = 0; j < cols_; j++) {
      matrix_[i][j] -= other.matrix_[i][j];
    }
  }
}

void S21Matrix::MulMatrix(const S21Matrix &other) {
  if (cols_ != other.rows_) {
    throw std::logic_error("Incorrect parameters");
  }
  S21Matrix result(rows_, other.cols_);
  for (int i = 0; i < rows_; i++) {
    for (int j = 0; j < other.cols_; j++) {
      for (int k = 0; k < cols_; k++) {
        result.matrix_[i][j] += matrix_[i][k] * other.matrix_[k][j];
      }
    }
  }
  *this = result;
}

void S21Matrix::MulNumber(const double num) noexcept {
  for (int i = 0; i < rows_; i++) {
    for (int j = 0; j < cols_; j++) {
      matrix_[i][j] *= num;
    }
  }
}

//  ------------------------Transformation
//  operations-------------------------------------------------------------------------------------------------

S21Matrix S21Matrix::Transpose() const {
  S21Matrix result(cols_, rows_);
  for (int i = 0; i < result.rows_; i++) {
    for (int j = 0; j < result.cols_; j++) {
      result.matrix_[i][j] = matrix_[j][i];
    }
  }
  return result;
}

double S21Matrix::Determinant() const {
  double result = 0.0;
  NotEqRowCol();
  if (rows_ == 1) {
    result = matrix_[0][0];
  } else if (rows_ == 2) {
    result = matrix_[0][0] * matrix_[1][1] - matrix_[1][0] * matrix_[0][1];
  } else {
    S21Matrix minor_matrix(rows_ - 1, cols_ - 1);
    double res_det = 0.0;
    for (int j = 0; j < cols_; j++) {
      Minor(minor_matrix, 0, j);
      double min_res = minor_matrix.Determinant();
      int sign = pow((-1), j + 2);
      res_det += sign * matrix_[0][j] * min_res;
      result = res_det;
    }
  }
  return result;
}

S21Matrix S21Matrix::CalcComplements() const {
  NotEqRowCol();
  S21Matrix result(rows_, cols_);
  if (rows_ == 1) {
    result.matrix_[0][0] = 1;
  } else {
    S21Matrix det(rows_ - 1, cols_ - 1);
    for (int i = 0; i < rows_; i++) {
      for (int j = 0; j < cols_; j++) {
        Minor(det, i, j);
        double min_res = det.Determinant();
        result.matrix_[i][j] = pow(-1, i + j) * min_res;
      }
    }
  }
  return result;
}

S21Matrix S21Matrix::InverseMatrix() const {
  NotEqRowCol();
  S21Matrix result(rows_, cols_);
  double d_res = Determinant();
  if (std::fabs(d_res) <= 1e-7) {
    throw std::length_error("Inverse matrix does not exist");
  } else {
    result = Transpose().CalcComplements();
    result.MulNumber(1.0 / d_res);
  }
  return result;
}

//  ----------------------Helpers-----------------------------------------------

void S21Matrix::Swap(S21Matrix &other) noexcept {
  std::swap(rows_, other.rows_);
  std::swap(cols_, other.cols_);
  std::swap(matrix_, other.matrix_);
}

void S21Matrix::CreateMatrix() {
  if (rows_ < 1 || cols_ < 1) {
    throw std::length_error("Incorrect size of matrix");
  }
  matrix_ = new double *[rows_]();
  for (int i = 0; i < rows_; i++) {
    matrix_[i] = new double[cols_]();
  }
}

void S21Matrix::ClearMatrix() {
  if (matrix_ != nullptr) {
    for (int i = 0; i < rows_; i++) {
      delete[] matrix_[i];
    }
    delete[] matrix_;
    matrix_ = nullptr;
    rows_ = cols_ = 0;
  }
}

void S21Matrix::CopyMatrix(const S21Matrix &other) noexcept {
  for (int i = 0; i < rows_; i++) {
    for (int j = 0; j < cols_; j++) {
      matrix_[i][j] = other.matrix_[i][j];
    }
  }
}

void S21Matrix::NotEqRowCol() const {
  if (rows_ != cols_) {
    throw std::out_of_range("Rows and Columns not equal");
  }
}

void S21Matrix::CheckRowsCols(const S21Matrix &other) const {
  if (rows_ != other.rows_ || cols_ != other.cols_) {
    throw std::out_of_range("Rows and Columns not equal");
  }
}

void S21Matrix::Minor(const S21Matrix &minor, int rows_m, int cols_m) const {
  int columns_minor = 0, rows_minor = 0, flag = 0;
  for (int i = 0; i < rows_; i++) {
    for (int j = 0; j < cols_; j++) {
      if (i != rows_m && j != cols_m) {
        minor.matrix_[rows_minor][columns_minor] = matrix_[i][j];
        columns_minor++;
        flag = 1;
      }
    }
    if (flag == 1) {
      rows_minor++;
      columns_minor = 0;
      flag = 0;
    }
  }
}
